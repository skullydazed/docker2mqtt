#!/usr/bin/env python3
"""Listens to `docker system events` and sents container stop/start events to mqtt.
"""
import atexit
import json
import queue
import re
from os import environ
from socket import gethostname
from subprocess import run, Popen, PIPE
from threading import Thread
from time import sleep, time

import paho.mqtt.client

DEBUG = environ.get('DEBUG', '1') == '1'
DESTROYED_CONTAINER_TTL = int(environ.get('DESTROYED_CONTAINER_TTL', 24*60*60))
HOMEASSISTANT_PREFIX = environ.get('HOMEASSISTANT_PREFIX', 'homeassistant')
DOCKER2MQTT_HOSTNAME = environ.get('DOCKER2MQTT_HOSTNAME', gethostname())
MQTT_CLIENT_ID = environ.get('MQTT_CLIENT_ID', 'docker2mqtt')
MQTT_USER = environ.get('MQTT_USER', '')
MQTT_PASSWD = environ.get('MQTT_PASSWD', '')
MQTT_HOST = environ.get('MQTT_HOST', 'localhost')
MQTT_PORT = int(environ.get('MQTT_PORT', '1883'))
MQTT_TIMEOUT = int(environ.get('MQTT_TIMEOUT', '30'))
MQTT_TOPIC_PREFIX = environ.get('MQTT_TOPIC_PREFIX', 'docker')
MQTT_QOS = int(environ.get('MQTT_QOS', 1))
DISCOVERY_TOPIC = f'{HOMEASSISTANT_PREFIX}/binary_sensor/{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}_{{}}/config'
WATCHED_EVENTS = ('create', 'destroy', 'die', 'pause', 'rename', 'start', 'stop', 'unpause')

known_containers = {}
pending_destroy_operations = {}
docker_events_cmd = ['docker', 'events', '-f', 'type=container', '--format', '{{json .}}']
docker_ps_cmd = ['docker', 'ps', '-a', '--format', '{{json .}}']
invalid_ha_topic_chars = re.compile(r'[^a-zA-Z0-9_-]')


@atexit.register
def mqtt_disconnect():
    """Called by atexit to make sure we send our last_will message.
    """
    mqtt.publish(f'{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}/status', 'offline', qos=MQTT_QOS, retain=True)
    mqtt.disconnect()
    sleep(1)
    mqtt.loop_stop()


def mqtt_send(topic, payload, retain=False):
    try:
        if DEBUG:
            print(f'Sending to MQTT: {topic}: {payload}')
        mqtt.publish(topic, payload=payload, qos=MQTT_QOS, retain=retain)

    except Exception as e:
        print(f'MQTT Publish Failed: {e}')


def register_container(container_entry):
    """
    """
    known_containers[container_entry['name']] = container_entry
    registration_topic = DISCOVERY_TOPIC.format(invalid_ha_topic_chars.sub('_', container_entry['name']))
    registration_packet = {
        'name': f"{MQTT_TOPIC_PREFIX.title()} {container_entry['name']}",
        'unique_id': f'{MQTT_TOPIC_PREFIX}_{DOCKER2MQTT_HOSTNAME}_{registration_topic}',
        'availability_topic': f'{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}/status',
        'payload_available': 'online',
        'payload_not_available': 'offline',
        'state_topic': f'{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}/{container_entry["name"]}',
        'value_template': '{{ value_json.state }}',
        'payload_on': 'on',
        'payload_off': 'off',
        'device_class': 'running',
        'json_attributes_topic': f'{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}/{container_entry["name"]}',
        'qos': MQTT_QOS,
    }
    mqtt_send(registration_topic, json.dumps(registration_packet), retain=True)
    mqtt_send(f'{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}/{container_entry["name"]}', json.dumps(container_entry), retain=True)


def readline_thread():
    """Run docker events and continually read lines from it.
    """
    with Popen(docker_events_cmd, stdout=PIPE, text=True) as proc:
        while True:
            docker_events.put(proc.stdout.readline())


if __name__ == '__main__':
    # Setup MQTT
    mqtt = paho.mqtt.client.Client(
        client_id=MQTT_CLIENT_ID
    )
    mqtt.username_pw_set(username=MQTT_USER,password=MQTT_PASSWD)
    mqtt.will_set(f'{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}/status', 'offline', qos=MQTT_QOS, retain=True)
    mqtt.connect(MQTT_HOST, MQTT_PORT, MQTT_TIMEOUT)
    mqtt.loop_start()
    mqtt_send(f'{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}/status', 'online', retain=True)

    # Register containers with HA
    docker_ps = run(docker_ps_cmd, stdout=PIPE, text=True)
    for line in docker_ps.stdout.splitlines():
        container_status = json.loads(line)

        if 'Paused' in container_status['Status']:
            status_str = 'paused'
            state_str = 'off'
        elif 'Up' in container_status['Status']:
            status_str = 'running'
            state_str = 'on'
        else:
            status_str = 'stopped'
            state_str = 'off'
        
        register_container({
            'name': container_status['Names'],
            'image': container_status['Image'],
            'status': status_str,
            'state': state_str
        })

    # Start the docker events thread
    docker_events = queue.Queue()
    docker_events_t = Thread(target=readline_thread, daemon=True)
    docker_events_t.start()

    # Loop and wait for new events
    while True:
        # Remove any destroyed containers that have passed the TTL
        for container, destroyed_at in pending_destroy_operations.copy().items():
            if time() - destroyed_at > DESTROYED_CONTAINER_TTL:
                print(f'Removing container {container} from MQTT.')
                registration_topic = DISCOVERY_TOPIC.format(invalid_ha_topic_chars.sub('_', container))
                mqtt_send(registration_topic, '', retain=True)
                mqtt_send(f'{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}/{container}', '', retain=True)
                del(pending_destroy_operations[container])

        # Collect and process an event from `docker events`
        try:
            line = docker_events.get(timeout=1)
        except queue.Empty:
            # No data right now, just move along.
            continue
 
        event = json.loads(line)
        if event['status'] not in WATCHED_EVENTS:
            continue

        container = event['Actor']['Attributes']['name']

        if event['status'] == 'create':
            # Cancel any previous pending destroys and add this to known_containers.
            print(f'Container {container} has been created.')
            if container in pending_destroy_operations:
                print(f'Removing pending delete for {{container}}.')
                del(pending_destroy_operations[container])

            register_container({
                'name': container,
                'image': event['from'],
                'status': 'created',
                'state': 'off'
            })

        elif event['status'] == 'destroy':
            # Add this container to pending_destroy_operations.
            print(f'Container {container} has been destroyed.')
            pending_destroy_operations[container] = time()
            known_containers[container]['status'] = 'destroyed'
            known_containers[container]['state'] = 'off'

        elif event['status'] == 'die':
            print(f'Container {container} has stopped.')
            known_containers[container]['status'] = 'stopped'
            known_containers[container]['state'] = 'off'

        elif event['status'] == 'pause':
            print(f'Container {container} has paused.')
            known_containers[container]['status'] = 'paused'
            known_containers[container]['state'] = 'off'

        elif event['status'] == 'rename':
            old_name = event['Actor']['Attributes']['oldName']
            if old_name.startswith('/'):
                old_name = old_name[1:]
            print(f'Container {old_name} renamed to {container}.')
            mqtt_send(f'{HOMEASSISTANT_PREFIX}/binary_sensor/{MQTT_TOPIC_PREFIX}/{old_name}/config', '', retain=True)
            mqtt_send(f'{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}/{old_name}', '', retain=True)
            register_container({
                'name': container,
                'image': known_containers[old_name]['image'],
                'status': known_containers[old_name]['status'],
                'state': known_containers[old_name]['state']
            })
            del(known_containers[old_name])

        elif event['status'] == 'start':
            print(f'Container {container} has started.')
            known_containers[container]['status'] = 'running'
            known_containers[container]['state'] = 'on'

        elif event['status'] == 'unpause':
            print(f'Container {container} has unpaused.')
            known_containers[container]['status'] = 'running'
            known_containers[container]['state'] = 'on'

        else:
            # Don't send an MQTT packet if nothing has changed
            continue

        mqtt_send(f'{MQTT_TOPIC_PREFIX}/{DOCKER2MQTT_HOSTNAME}/{container}', json.dumps(known_containers[container]), retain=True)
